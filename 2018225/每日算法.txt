1.交叉字符串问题

给出三个字符串:s1、s2、s3，判断s3是否由s1和s2交叉构成。
 
样例
比如 s1 = "aabcc" s2 = "dbbca"

    - 当 s3 = "aadbbcbcac"，返回  true.

    - 当 s3 = "aadbbbaccc"， 返回 false.

public boolean isInterleave(String s1, String s2, String s3) {
        // write your code here
        int s1len=s1.length();
        int s2len=s2.length();
        int s3len=s3.length();
        if(s1len==0)
        {
            if(s2.equals(s3)) return true;
            else {
                return false;
            }
        }
        if(s2len==0)
        {
            if(s1.equals(s3)) return true;
            else return false;
        }
        int visited[][]=new int[s1len+1][s2len+1];
        visited[0][0]=1;
        for(int i=0;i<s1len;i++)
        {
            if(s1.charAt(i)==s3.charAt(i))
                visited[i+1][0]=1;
            else break;
        }
        for(int j=0;j<s2len;j++)
        {
            if(s2.charAt(j)==s3.charAt(j))
                visited[0][j+1]=1;
            else break;
        }
        for(int i=1;i<visited.length;i++)
            for(int j=1;j<visited[0].length;j++)
            {
                int hang=i-1;
                int lie=j-1;
                if((visited[i][j-1]==1&&s2.charAt(lie)==s3.charAt(hang+lie+1))||(visited[i-1][j]==1&&s1.charAt(hang)==s3.charAt(hang+lie+1)))
                    visited[i][j]=1;

            }
        if(visited[visited.length-1][visited[0].length-1]==1)
        return true;
        return false;
    }


2.背包问题

package com.hellojava.fun1;

public class Func3 {
	
	
	
	public static void main(String[] args) {
		System.out.println(backpack(12, new int[]{2,3,5,7}));
	}
	
	
	public static int backpack(int m,int [] A){
		int[][] dp=new int[A.length][m+1];
		for(int i=0;i<A.length;i++){
			//背包空间为0时，不管要放几个物品，可装满的背包空间为0
			dp[i][0]=0;
		}
		
		for(int j=1;j<m+1;j++){
			if(A[0]<=j){ 
				dp[0][j]=A[0];
			}else{
				dp[0][j]=0;
			}
			for (int i = 1; i < A.length; i++) {
				if(A[i]>j){
					dp[i][j]=dp[i-1][j];
				}
				else{
					/**
					 * 1.为了把第i个物品放入背包，背包需要腾出至少A[i]的空间dp[i-1][j-A[i]]，
					 * 再加上第i个物品的空间A[i]，即为当前背包容量为j时装入的最大容量
					 * 2.j<A[i]，总装满空间为dp[i-1][j]
					 * 3.装入之后空间反而比之前的空间小了，此时dp[i-1][j-A[i]]+A[i]<dp[i-1][j]
					 */
					dp[i][j]=Math.max(dp[i-1][j-A[i]]+A[i], dp[i-1][j]);
				}
			}
		}
		return dp[A.length - 1][m];
	}
}




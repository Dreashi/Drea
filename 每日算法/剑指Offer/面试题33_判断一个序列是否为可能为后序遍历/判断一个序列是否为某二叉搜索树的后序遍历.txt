/*
	问题:判断一个序列是否是一个二叉搜索树的后序遍历序列
	思路:后序遍历，最后一个结点是root，而二叉搜索树，左比root小，右比root大。
	注意:由于是频繁对数组下标进行操作，所有边界需要非常小心
*/
#include<stdio.h>
bool verifySquenceOfBST(int * arr,int len)
{
	if(!arr || len<=0)
		return false;
	int root=arr[len-1];//存储根结点
	int i=0;//记录左子树
	for(;i<len-1;++i)
	{
		if(arr[i]>root)//左子树结束
			break;
	}

	int j=i;
	for(;j<len-1;++j)
	{
		if(arr[j]<root)//右子树中的结点小于根结点,不符合二叉搜索树的特点
			return false;
	}

	bool left=true;
	if(i>0)//左子树还有结点
		left=verifySquenceOfBST(arr,i);
	bool right=true;
	if(i<len-1)//右子树还有结点
		right=verifySquenceOfBST(arr+i,len-i-1);
	return (left & right);
}
int main(void)
{	
	int arr1[3]={1,3,2};//Yes
	int arr2[3]={3,1,2};//No 
	bool b1=verifySquenceOfBST(arr1,3);
	bool b2=verifySquenceOfBST(arr2,3);
	printf("b1=%d\tb2=%d\n",b1,b2);//1为true，0为false
	return 0;
}
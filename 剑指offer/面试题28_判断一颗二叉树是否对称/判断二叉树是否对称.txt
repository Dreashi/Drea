/*
	问题:判断一颗二叉树是否对称
	思路:
		一颗二叉树与它的镜像相同，就是对称;否则就是不对称。这里就可以自定一种遍历方式（右，左，根），如果和前序遍历相等，并且连NULL的位置都相同，
		那么就可以说该二叉树是对称的。
	
	注意:
		1.NULL位置不对应，树不对称
		2.相应位置的值不同，树不对称
		3.同样注意空指针的问题
		
*/

#include<stdio.h>
#include<stdlib.h>

typedef struct node{
	int data;
	struct node * left;
	struct node * right;
}BTNode;
BTNode * createBTree(int * arr,int length);//创建二叉搜索树

bool isSymmetrical(BTNode * root);//判断是否对称
bool isSymmetrical(BTNode * root1,BTNode * root2);//

BTNode * createBTree(int * arr,int length)
{
	if(!arr && length<=0)
		return NULL;
	BTNode * root,*p_Node,*pre_Node,*next_Node;
	//创建根结点
	root =(BTNode *)malloc(sizeof(BTNode));
	root->data=arr[0];
	root->left = root->right = NULL;
	
	for(int i=1;i<length;++i)
	{
		//后置结点
		next_Node=root;
		p_Node=(BTNode *)malloc(sizeof(BTNode));
		p_Node->data=arr[i];
		p_Node->left=p_Node->right=NULL;

		while(next_Node)
		{
			//前置结点
			pre_Node=next_Node;
			if(pre_Node->data < p_Node->data )
				next_Node=next_Node->right;
			else
				next_Node=next_Node->left;
		}

		//挂结点
		if(pre_Node->data < p_Node->data)
			pre_Node->right=p_Node;
		else
			pre_Node->left=p_Node;
			
	}

	return root;
}

bool isSymmetrical(BTNode * root)
{
	return isSymmetrical(root,root);
}

bool isSymmetrical(BTNode * root1,BTNode * root2)
{
	if(!root1 && !root2)
		return true;
	if(!root1 || !root2)
		return false;
	if(root1->data != root2->data)
		return false;
	return isSymmetrical(root1->left,root2->right) && isSymmetrical(root1->right,root2->left);//关键在于找到对应位置进行比较
}

int main(void)
{
	//这里创建的是二叉搜索数
	int baseArray[7]={5,4,2,9,3,6,1};//父树

	BTNode * bRoot = createBTree(baseArray,7);//创建一颗二叉搜索树
	
	bool flag = isSymmetrical(bRoot);//判断二叉树是否相等

	if(flag)
		printf("该二叉树是对称的!");
	else
		printf("该二叉树不是对称的!");

	return 0;
}
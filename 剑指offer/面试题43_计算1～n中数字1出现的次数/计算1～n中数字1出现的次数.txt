/* 
	作者:Coffee
	日期:2018-1-24
	问题:任意输入一个数ｎ，计算１～ｎ中的数字“１”出现的次数
	思路:首先可以很容易想到遍历所有数，并且对每个数计算１的数量，然后累加，但是这样时间复杂度为O(n*logn)
		所以我们换个思路，分别计算1在各个位置出现的次数
	
*/

#include<stdio.h>
#include<stdlib.h>
int powerBase10(int p);//计算10的次方
int getTheNumberOf1(int num);//计算1出现的次数

int powerBase10(int p)
{
	if(p<0)
		return 0;
	int result = 1; 
	for(int i=0;i<p;++i)
		result *=10;
	return result;
}

int getTheNumOf1(int num)
{
	//printf("num:%d\t",num);
	if(num<=0)
		return 0;
	int digit=0;//位数
	int temp=num;//暂存
	while(temp)
	{
		temp/=10;
		digit++;
	}
//	printf("digit:%d\t",digit);
	int first = num/powerBase10(digit-1);//记录首位的数
//	printf("first:%d\t",first);
	int firstDigitOf1;//出现在首位的1
	if(first>1)
		firstDigitOf1=powerBase10(digit-1);
	else if(first==1)
		firstDigitOf1=num-powerBase10(digit-1)+1;
//	printf("firstDigitOf1:%d\t",firstDigitOf1);

	int otherDigitOf1=first*(digit-1)*powerBase10(digit-2);//其他位置的1,由规律得出:当剩余位置中某一位为1时，其余位置可以任意选择，由此可以计算
//	printf("otherDigitOf1:%d\n",otherDigitOf1);
	
	int recursiveOf1=getTheNumOf1(num-first*powerBase10(digit-1));
//
	printf("recursiveOf1:%d\n",recursiveOf1);

	return firstDigitOf1+otherDigitOf1+recursiveOf1;



}

int main(void)
{
	int num;
	printf("请输入一个数:");
	scanf("%d",&num);
//	int test=powerBase10(num);
//	printf("%d",test);
	int numberOf1=getTheNumOf1(num);
	printf("\n1～%d中'1'出现的次数为:%d\n",num,numberOf1);
	return 0;
}